version: "3.9"

name: dagster/stack
services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_postgresql:
    image: postgres:11
    container_name: dagster_postgresql
    hostname: ${POSTGRES_HOSTNAME:-dagster_postgresql}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - ./dagster_postgres_data:/var/lib/postgresql/data
    networks:
      - services

  # This service runs additional pg_admin
  dagster_pgadmin:
    container_name: dagster_pgadmin
    hostname: dagster-pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@co.io}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
    networks:
      - services
    volumes:
      - ./dagster_pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: on-failure
    depends_on:
      - dagster_postgresql

  # This service runs the gRPC server that loads your user code, in both dagit
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by dagit.
  dagster_core:
    build: .
    image: dagster:latest
    container_name: dagster_core
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${POSTGRES_USER:-postgres}
      DAGSTER_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DAGSTER_POSTGRES_DB: ${POSTGRES_DB:-postgres}
      DAGSTER_CURRENT_IMAGE: "dockerfile"
      DAGSTER_PG_USERNAME: ${POSTGRES_USER:-postgres}
      DAGSTER_PG_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DAGSTER_PG_HOST: ${POSTGRES_HOSTNAME:-dagster_postgresql}
      DAGSTER_PG_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - ./dagster_data:/opt/dagster/app/
      - ./dagster_home:/opt/dagster/dagster_home/
    networks:
      - services

  # This service runs dagit, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_dagit:
    build: .
    container_name: dagster_dagit
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_PG_USERNAME: ${POSTGRES_USER:-postgres}
      DAGSTER_PG_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DAGSTER_PG_HOST: ${POSTGRES_HOSTNAME:-dagster_postgresql}
      DAGSTER_PG_DB: ${POSTGRES_DB:-postgres}
    volumes:
      # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - services
    depends_on:
      - dagster_postgresql
      - dagster_core

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build: .
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${POSTGRES_USER:-postgres}
      DAGSTER_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DAGSTER_POSTGRES_DB: ${POSTGRES_DB:-postgres}
      DAGSTER_PG_USERNAME: ${POSTGRES_USER:-postgres}
      DAGSTER_PG_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DAGSTER_PG_HOST: ${POSTGRES_HOSTNAME:-dagster_postgresql}
      DAGSTER_PG_DB: ${POSTGRES_DB:-postgres}
    volumes:
      # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - services
    depends_on:
      - dagster_postgresql
      - dagster_core

volumes:
  dagster_postgres_data:
    driver: local
    name: dagster_postgres_data
  dagster_pgadmin_data:
    driver: local
    name: dagster_pgadmin_data
  dagster_data:
    driver: local
    name: dagster_data
  dagster_home:
    driver: local
    name: dagster_home

networks:
  services:
    name: ${DAGSTER_NETWORK:-dagster_network}
